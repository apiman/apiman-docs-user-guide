
== Building the Project
Building apiman should be a simple matter of doing a standard Maven build:

....
mvn clean install
....

This will do a full build of apiman and execute all unit tests.  However,
the result will not include a ready-to-run version of apiman.  For that, you
may want to try the following:

....
mvn clean install -Pinstall-all-wildfly8
....

This command will do a full apiman build, but will also download WildFly
and install apiman into it.  The result will be a fully configured install of
apiman running in WildFly.  The location of this WildFly install will be here:

....
apiman/tools/server-all/targe/wildfly-{wildfly.version}/
....

At this point you can test apiman by simply running WildFly from the above
location using a command something like this:

....
./bin/standalone.sh -b 0.0.0.0
....

== Setting up a Development Environment
Because apiman is a fairly standard maven project, it should be relatively easy
to import the project into Eclipse or IntelliJ IDEA.  For now we'll leave this
as an exercise for the reader.

== Architecture
The basic architecture of apiman is fairly straightforward.  There are several WARs that
make up the default apiman installation.  These include:

* API Manager back-end (JAX-RS WAR)
* API Manager UI (GWT/Errai WAR)
* API Gateway Config (JAX-RS WAR)
* API Gateway (Servlet WAR)

The API Manager back-end WAR is responsible for exposing a set of REST endpoints that
make up the API Manager REST interface.  The API Manager UI uses this REST API
directly when the user manages the various entities in the data model.

The API Manager UI is a client-only GWT/Errai application.  Aside from authentication
related activities, this WAR only contains HTML, JavaScript, and CSS.  The UI uses
the browser to make direct, authenticated calls to the REST endpoints exposed by the
API Manager back-end WAR.

The API Gateway Config exposes the standard apiman Gateway REST API so that the API
Gateway can be remotely configured.  This is the REST API that the API Manager uses
whenever a user publishes a Service or registers an Application.  It is responsible
for configuring the API Gateway's embedded Policy Engine.

The API Gateway is the primary runtime component of apiman and is implemented as a
servlet that embeds the apiman Policy Engine.  All requests to the API Gateway WAR are
assumed to be intended for managed Services previously published to it.

=== Policy Implementations

Policies are the mechanism through which the principal functionality of apiman is enforced.

include::Policy.asciidoc[]

== Gateway Implementations

At the heart of any apiman gateway implementation is the flexible, lightweight
apiman-core. The core serves to execute policies upon the traffic passing through
it, determining whether a given conversation should continue or not.

A set of simple, asynchronous interfaces are provided which an implementor should
fulfill using the platform's native functionality to allow apiman to interact with
its various components and services.

include::Gateway.asciidoc[]
