= apiman - Installation Guide
:homepage: http://apiman.io/
:doctype: book

== Installation
This guide provides detailed information about how to install and configure apiman.

=== Installing in WildFly 8
The apiman project primarily targets WildFly 8 as a runtime environment.  In order to install
apiman you will need to download both WildFly 8 and the apiman overlay distribution.  Once
both are downloaded, it's a simple matter of unpacking both into the same location.

==== Download
First you will need to download both WildFly 8 and apiman:

* http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip[Download WildFly 8]
* http://downloads.jboss.org/overlord/apiman/1.0.2.Final/apiman-distro-wildfly8-1.0.2.Final-overlay.zip[Download apiman 1.0.2.Final]

....
curl http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip -o wildfly-8.2.0.Final.zip
curl http://downloads.jboss.org/overlord/apiman/1.0.2.Final/apiman-distro-wildfly8-1.0.2.Final-overlay.zip -o apiman-distro-wildfly8-1.0.2.Final-overlay.zip
....

==== Unpack
Once both files have been downloaded, simply unpack both in the same location.

....
unzip wildfly-8.2.0.Final.zip
unzip -o apiman-distro-wildfly8-1.0.2.Final-overlay.zip -d wildfly-8.2.0.Final
....

==== Run WildFly 8
The apiman overlay contains everything needed to run apiman, including:

* apiman binaries (several WAR files)
* apiman-specific WildFly 8 configuration (*standalone-apiman.xml*)
* apiman rdbms datasource (h2)
* pre-configured *admin* user with password *admin123!*
* pre-configured h2 database for the API Manager (populated with default values)

For this reason, there is no additional configuration required to run apiman.  Simply start up
WildFly using the apiman configuration file:

....
cd wildfly-8.2.0.Final
./bin/standalone.sh -c standalone-apiman.xml
....


=== Installing using Docker
Another option when installing apiman is to use our docker image.  You're probably pretty
familiar with docker if you're going that route, but here is an example of how to start up
the apiman docker image:

....
docker pull apiman/on-wildfly8
docker run -it -p 8080:8080 apiman/on-wildfly8
....

[NOTE]
====
You can find apiman on https://registry.hub.docker.com/repos/apiman/[docker hub].
====

== Logging In
Once apiman is running, you should be able to log in to the API Manager by pointing your
browser at the following URL:

....
http://localhost:8080/apiman-manager
....

You may log in with credentials *admin/admin123!*.
[NOTE]
====
We strongly advise that you immediately change the Keycloak admin user password, as well
as the "admin" user found in the "apiman" realm!!  ( you can do that by navigating to
http://localhost:8080/auth/admin/ )
====


== Configuration
Of course apiman is made up of a number of different components, many of which can be configured
to use various implementations and/or providers.  When downloading and installing apiman, the
default distribution includes reasonable default values for all options.  This section details
these options and explains the default values.

=== Configuration Properties
All of the apiman WARs share a common configuration file called *apiman.properties*, which can
be found in *standalone/configuration*.  This file therefore contains configuration settings
for all three applications (API Manager, API Manager UI, API Gateway).

Here is a breakdown of the properties found in this configuration file:

* *apiman.plugins.repositories*
+
Typical Value:: http://repository.jboss.org/nexus/content/groups/public/
+
Description:: A comma separated list of maven repositories from which to (try to) download apiman plugins.

* *apiman-manager-ui.api.endpoint*
+
Typical Value:: <empty>
+
Description:: The public endpoint of the API Manager's REST API.  This is used by the API Manager UI to communicate with the back end.  If ommitted, the UI will assume the back-end is located on the same server as the UI.

* *apiman-manager-ui.api.authentication.type*
+
Typical Value:: bearerToken
+
Description:: The type of authentication used by the API Manager UI when communicating with the API Manager.

* *apiman-manager-ui.api.authentication.token.generator*
+
Typical Value:: io.apiman.manager.ui.server.wildfly8.KeyCloakBearerTokenGenerator
+
Description:: The class used by the UI to generate authentication tokens (only used for certain types of authentication).

* *apiman-gateway.registry*
+
Typical Value:: io.apiman.gateway.engine.ispn.InfinispanRegistry
+
Description:: The implementation of the service/application registry used by the API Gateway.  By default a persistent Infinispan cache is used.

* *apiman-gateway.connector-factory*
+
Typical Value:: io.apiman.gateway.platforms.servlet.connectors.HttpConnectorFactory
+
Description:: The implementation of a connector factory for API endpoints of type "http".  This factory is used by the Gateway when proxying a request to a back-end endpoint.

* *apiman-gateway.policy-factory*
+
Typical Value:: io.apiman.gateway.engine.policy.PolicyFactoryImpl
+
Description:: The class that the API Gateway will use creating policies.

* *apiman-gateway.components.ISharedStateComponent*
+
Typical Value:: io.apiman.gateway.engine.ispn.InfinispanSharedStateComponent
+
Description:: The implementation of the shared-state component - a component that can store arbitrary state across request invocations.

* *apiman-gateway.components.IRateLimiterComponent*
+
Typical Value:: io.apiman.gateway.engine.ispn.InfinispanRateLimiterComponent
+
Description:: The implementation of the rate limiter component, which is used by the rate limiting policy.

* *apiman-gateway.components.IPolicyFailureFactoryComponent*
+
Typical Value:: io.apiman.gateway.platforms.servlet.PolicyFailureFactoryComponent
+
Description:: The implementation class to use for the factory that creates policy failures.


=== API Manager Database
The API Manager, by default, is a typical CDI application and uses JPA/Hibernate to persist its data.  The
JPA layer requires a data source to connect to a supported database.  When running in WildFly this
datasource is made available by deploying the following file:

....
standalone/deployments/apiman-ds.xml
....

Out of the box this data source is usually a simple H2 configuration, but you can (of course) change
it to support whatever database you desire.

```xml
<?xml version="1.0" encoding="UTF-8"?>
<datasources>
  <datasource jndi-name="jdbc/ApiManDT" pool-name="apiman-manager-api" enabled="true"
    use-java-context="true">
    <connection-url>jdbc:h2:${jboss.server.data.dir}${/}h2${/}apiman-manager-api;MVCC=true</connection-url>
    <driver>h2</driver>
    <security>
      <user-name>sa</user-name>
    </security>
  </datasource>
</datasources>
```

The project comes with DDLs for MySQL and PostgreSQL, to hopefully make it easy to switch away from H2.  Note
that switching databases also requires a change to the standalone-apiman.xml file.  The following
should be changed to appropriate values for your database:

```xml
  <system-properties>
    <property name="apiman.hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect" />
    <property name="apiman.hibernate.hbm2ddl.auto" value="validate" />
  </system-properties>
```

You can, of course, set the hbm2ddl property to "update" so that hibernate automatically creates the
database structure when it starts up.  Alternatively, the MySQL and PostgreSQL DDLs can be found in
*apiman/ddls/*.

=== API Gateway Registry
The API Gateway includes a registry that stores the published service and application information.
This registry is updated whenever a user publishes a service (or registers an application) from
within the API Manager UI.  The registry contains just the configuration information necessary for
the API Gateway to properly apply the appropriate policies to all inbound requests.

Out of the box, the API Gateway is configured to use a persistent Infinispan cache to store the
published/registered data.  The configuration of the Infinispan cache can be found in
*standalone-apiman.xml* and is detailed here:

```xml
<subsystem xmlns="urn:jboss:domain:infinispan:2.0">
  <cache-container name="apiman-gateway" default-cache="registry" start="EAGER">
    <local-cache name="registry" batching="true">
      <file-store passivation="false" purge="false" />
    </local-cache>
  </cache-container>
</subsystem>
```

This cache can be configured however you choose, but in all cases should be made persistent.


=== API Gateway Rate Limiter
Part of the running apiman system is a "Rate Limiter" component.  This component is used by
apiman policies to enforce rate limits and uses an Infinispan cache to store data.  The
configuration of the Infinispan cache can be found in *standalone-apiman.xml* and is
detailed here:

```xml
<subsystem xmlns="urn:jboss:domain:infinispan:2.0">
  <cache-container name="apiman-gateway" default-cache="registry" start="EAGER">
    <local-cache name="rate-limiter" batching="true">
      <file-store passivation="false" purge="false"/>
    </local-cache>
  </cache-container>
</subsystem>
```


=== API Gateway Shared State
Part of the running apiman system is a "Shared State" component.  This component is used by
apiman policies to share interesting state information across multiple requests.  The
shared state component uses another Infinispan cache to store data.  The
configuration of the Infinispan cache can be found in *standalone-apiman.xml* and is
detailed here:

```xml
<subsystem xmlns="urn:jboss:domain:infinispan:2.0">
  <cache-container name="apiman-gateway" default-cache="registry" start="EAGER">
    <local-cache name="shared-state" batching="true">
      <file-store passivation="false" purge="false" />
    </local-cache>
  </cache-container>
</subsystem>
```

=== Gateway API Authentication
The Gateway's REST API is what the API Manager invokes when publishing services and applications
to the Gateway.  This REST API should be protected, often using BASIC authentication.  By default,
the Gateway REST API requires BASIC authentication credentials, as well as a role of *apipublisher*.
In other words, the Gateway REST API can only be invoked by a valid user, and that user must have
the *apipublisher* role.


:numbered!:
